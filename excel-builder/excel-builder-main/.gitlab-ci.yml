# image: docker:latest

stages:
  # - install-environment
  # - test
  - build-push
  - deploy

before_script:
  - echo $GCP_PROJECT_ID

# install-go:
#   stage: install-environment
#   script:
#     - export CURRENT_BUILD_PATH=$(pwd)
#     - echo $PATH
#     - rm -rf $HOME/golang
#     - rm -rf $HOME/gopath
#     - mkdir -p $HOME/golang # for GOROOT (contains the Go binary & core packages)
#     - mkdir -p $HOME/gopath # for GOPATH (contains code and external packages)
#     - curl http://storage.googleapis.com/golang/go1.5.2.linux-amd64.tar.gz 2>/dev/null > go1.5.2.linux-amd64.tar.gz
#     - tar -C $HOME/golang -xzf go1.5.2.linux-amd64.tar.gz
#     - export GOROOT=$HOME/golang/go
#     - export GOPATH=$HOME/gopath
#     - export PATH=$PATH:$GOROOT/bin
#     - export PATH=$PATH:$GOPATH/bin
#     - (if [[ "$(go version)" == *"go version go1.5"* ]]; then echo "âœ“ Go binary installed!"; else echo "Go binary not installed"; exit -1; fi);
#     - go version
#     - echo $PATH
#     - go env
#     - which go

# handler_test_cases:
#   image: golang:latest
#   stage: test
#   before_script:
#     - go version
#     - go mod download
#     - cd tests

#   script:
#     - go test

build-push:
  stage: build-push
  image: google/cloud-sdk

  before_script:
    - gcloud auth activate-service-account --key-file $GCP_CLOUD_RUN_SERVICE_CREDS
    - gcloud config set project $GCP_PROJECT_ID

  script:
    - gcloud builds submit . --config=cloudbuild.yaml

container-deploy:
  stage: deploy
  image: google/cloud-sdk
  before_script:
    - gcloud auth activate-service-account --key-file $GCP_CLOUD_RUN_SERVICE_CREDS
    - gcloud config set project $GCP_PROJECT_ID
  script:
    - gcloud run deploy excel-builder-container --image gcr.io/$GCP_PROJECT_ID/excel-builder --region asia-southeast1 --platform managed --allow-unauthenticated --max-instances=10 --concurrency=500 --cpu=1 --timeout=30
    